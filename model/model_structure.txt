nn.MapReduce(combine dim 1 and 2)
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> output]
  (1): nn.SplitTable(3)
  (2): nn.Sequential {
    [input -> (1) -> (2) -> output]
    (1): nn.ConcatTableNoGrad {
      input
        |`-> (1): nn.Sequential {
        |      [input -> (1) -> (2) -> (3) -> output]
        |      (1): nn.NarrowTable(0, 7)
        |      (2): nn.ParallelTable {
        |        input
        |          |`-> (1): nn.LookupTable
        |          |`-> (2): nn.LookupTable
        |          |`-> (3): nn.LookupTable
        |          |`-> (4): nn.LookupTable
        |          |`-> (5): nn.LookupTable
        |          |`-> (6): nn.LookupTable
        |           `-> (7): nn.LookupTable
        |           ... -> output
        |      }
        |      (3): nn.CAddTable
        |    }
        |`-> (2): nn.Sequential {
        |      [input -> (1) -> (2) -> output]
        |      (1): nn.SelectTable(8)
        |      (2): nn.LookupTable
        |    }
        |`-> (3): nn.Sequential {
        |      [input -> (1) -> (2) -> output]
        |      (1): nn.SelectTable(-1)
        |      (2): nn.LookupTable
        |    }
         ... -> output
    }
    (2): nn.JoinTable(3)
  }
  (3): nn.SplitTable(2)
  (4): nn.Sequencer @ nn.Recurrence @ nn.MaskZero @ nn.Sequential {
    [input -> (1) -> (2) -> (3) -> output]
    (1): nn.ParallelTable {
      input
        |`-> (1): nn.Linear(400 -> 250)
         `-> (2): nn.Linear(250 -> 250)
         ... -> output
    }
    (2): nn.CAddTable
    (3): nn.ReLU
  }
  (5): nn.SelectTable(-1)
  (6): nn.Linear(250 -> 46)
}
nn.MapReduce(split dim 1 into dim 1 and 2)
nn.LogSumExp(2)
nn.Sigmoid
nn.Select(2, classId)
nn.BCECriterion()


